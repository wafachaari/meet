{"version":3,"sources":["CitySearch.js","Event.js","EventList.js","NumberOfEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["CitySearch","state","query","suggestions","handleInputChanged","event","value","target","props","locations","filter","location","toUpperCase","indexOf","setState","handleItemClicked","suggestion","className","type","this","onChange","map","onClick","Component","Event","show","handledetails","summary","description","EventList","events","id","NumberOfEvents","eventsPerPage","handleLength","number","errorText","placeholder","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8179adb2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass CitySearch extends Component {\r\n  state = {\r\n    query: '',\r\n    suggestions: []\r\n  }\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    const suggestions = this.props.locations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    });\r\n    this.setState({\r\n      query: value,\r\n      suggestions,\r\n    });\r\n  };\r\n  handleItemClicked = (suggestion) => {\r\n    this.setState({\r\n      query: suggestion\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"CitySearch\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"city\"\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n\r\n        \r\n        <ul className=\"suggestions\">\r\n          {this.state.suggestions.map((suggestion) => (\r\n            <li\r\n              key={suggestion}\r\n              onClick={() => this.handleItemClicked(suggestion)}\r\n            >{suggestion}</li>\r\n          ))}\r\n          <li>\r\n            <b>See all cities</b>\r\n          </li>\r\n        </ul>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;","import React, { Component } from \"react\";\r\n\r\nclass Event extends Component {\r\n  constructor(props) {\r\n    super(props);}\r\n  state = {\r\n    show: false,\r\n  }\r\n\r\n  handledetails = () => {\r\n    this.setState({\r\n      show: !this.state.show,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const event = this.props.event;\r\n    return (\r\n      <div className=\"Event\">\r\n        \r\n          <h1>event</h1>\r\n          <h2> {event.summary}</h2>\r\n          <p>{event.location}</p>\r\n          <button\r\n            className=\"show_btn\"\r\n            onClick={() => this.handledetails()}\r\n          >\r\n            {!this.state.show ? 'Show Details' : 'Hide Details'}\r\n          </button>\r\n          {this.state.show && (\r\n            <div className=\"show_event\">\r\n              <h2> About event:</h2>\r\n              <p>{event.description}</p>\r\n            </div>\r\n          )}\r\n\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Event;","\r\nimport React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n  render() {\r\n\r\n    const events = this.props.events;\r\n    //console.log(events);\r\n    return (\r\n      <div className=\"EventList\">\r\n        <ul className=\"list\">\r\n          {events.map(event =>\r\n            <li key={event.id}>\r\n              <Event event={event} />\r\n            </li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default EventList;\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass NumberOfEvents extends Component {\r\n  state = {\r\n    eventsPerPage: 32,\r\n  };\r\n\r\n  handleLength = (event) => {\r\n    const number = event.target.value;\r\n\r\n    if (number <= 0) {\r\n      this.setState({\r\n        eventsPerPage: number,\r\n        errorText: 'Please select a valid number.'\r\n      });\r\n    } else {\r\n      this.setState({\r\n        eventsPerPage: number,\r\n\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let { eventsPerPage } = this.state;\r\n    return (\r\n      <div className=\"numberEvents\">\r\n        <h1>choose number</h1>\r\n        <input\r\n          type=\"text\"\r\n          className=\"number\"\r\n          placeholder=\"32\"\r\n          value={eventsPerPage}\r\n          onChange={this.handleLength}\r\n        />\r\n        <ul className=\"numberlist\">\r\n        </ul>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\nexport default NumberOfEvents;","import React from 'react';\nimport CitySearch from './CitySearch';\nimport './App.css';\n \nimport EventList from './EventList';\nimport NumberOfEvents from './NumberOfEvents';\n \nimport Event from './Event';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EventList />\n       <CitySearch/>\n       <Event/>\n       <NumberOfEvents/>\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}